name: Build and Deploy to Test PYPI

on:
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
  
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5.1.1
      with:
        python-version: ${{ matrix.python-version }}
  
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine
  
    - name: Configure CMake
      run: |
        $env:PYTHON_EXECUTABLE = (Get-Command python).Path
        $env:PYTHON_VERSION = (python -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
        echo "Python version: $env:PYTHON_VERSION"
        echo "Python executable: $env:PYTHON_EXECUTABLE"
        cmake -DPYBIND11_PYTHON_VERSION="$env:PYTHON_VERSION" -DPython3_ROOT_DIR="$env:PYTHONLOCATION" -DPython3_EXECUTABLE="$env:PYTHON_EXECUTABLE" -DPython_FIND_STRATEGY=LOCATION -DPython_FIND_REGISTRY=NEVER -DPython_FIND_FRAMEWORK=NEVER -S . -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
  
    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }}
  
    - name: Build Wheel
      run: python -m build -w ./PythonBuild
  
    - name: Publish on PyPI
      run: |
        $maxRetries = 3
        $retryCount = 0
        $success = $false
  
        while (-not $success -and $retryCount -lt $maxRetries) {
          try {
            python -m twine upload --repository-url https://test.pypi.org/legacy/ -u __token__ -p "${{ secrets.TEST_PYPI_REPO_TOKEN }}" PythonBuild/dist/* --verbose --disable-progress-bar
            $success = $true
          }
          catch {
            $retryCount++
            Write-Host "Upload failed. Retrying in 30 seconds... (Attempt $retryCount of $maxRetries)"
            Start-Sleep -Seconds 30
          }
        }
  
        if (-not $success) {
          throw "Failed to upload after $maxRetries attempts"
        }

  build-manylinux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['cp37-cp37m', 'cp38-cp38', 'cp39-cp39', 'cp310-cp310', 'cp311-cp311', 'cp312-cp312']
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
  
    - name: Build manylinux wheel
      run: |
        docker run --rm -v $(pwd):/io quay.io/pypa/manylinux_2_28_x86_64 /bin/bash -c "
        set -e
        cd /io
        
        # Install necessary dependencies
        yum install -y epel-release kernel-headers wayland-devel libxkbcommon-devel \
          wayland-protocols-devel mesa-libGL-devel mesa-libEGL-devel libXcursor-devel \
          libXi-devel libXinerama-devel libXrandr-devel libXrender-devel libXext-devel \
          libXfixes-devel libXt-devel libXtst-devel libX11-devel libXdamage-devel \
          libXcomposite-devel libwayland-client libevdev-devel kernel-devel libXrandr-devel \
          && yum clean all
        
        export PYTHON_ROOT=/opt/python/${{ matrix.python-version }}
        export PATH=\$PYTHON_ROOT/bin:\$PATH
        export PYTHON_EXECUTABLE=\$PYTHON_ROOT/bin/python
        
        \$PYTHON_EXECUTABLE -m pip install --upgrade pip -r requirements.txt cmake build auditwheel
        
        # Extract Python version (e.g., 3.7, 3.8, etc.)
        PYTHON_VERSION=\$(\$PYTHON_EXECUTABLE -c 'import sys; print(f\"{sys.version_info.major}.{sys.version_info.minor}\")')
        
        echo \"Python version: \$PYTHON_VERSION\"
        echo \"Python executable: \$PYTHON_EXECUTABLE\"
        
        \$PYTHON_EXECUTABLE -m cmake \
          -DPython3_ROOT_DIR=\$PYTHON_ROOT \
          -DPython3_EXECUTABLE=\$PYTHON_EXECUTABLE \
          -DPython_FIND_STRATEGY=LOCATION \
          -DPython_FIND_REGISTRY=NEVER \
          -DPython_FIND_FRAMEWORK=NEVER \
          -DPYBIND11_PYTHON_VERSION=\$PYTHON_VERSION \
          -DCMAKE_C_FLAGS=\"-D_POSIX_C_SOURCE=200809L -Wno-deprecated-declarations\" \
          -DCMAKE_CXX_FLAGS=\"-D_POSIX_C_SOURCE=200809L -Wno-deprecated-declarations\" \
          -S . -B build -DCMAKE_BUILD_TYPE=Release
        
        \$PYTHON_EXECUTABLE -m cmake --build build --config Release
        \$PYTHON_EXECUTABLE -m build -w ./PythonBuild
        for whl in PythonBuild/dist/*.whl; do
          auditwheel repair \"\$whl\" -w ./wheelhouse/
        done
        "
  
    - name: Install Twine
      run: pip install twine
  
    - name: Publish on PyPI
      run: python -m twine upload --repository-url https://test.pypi.org/legacy/ -u __token__ -p ${{ secrets.TEST_PYPI_REPO_TOKEN }} wheelhouse/*.whl --verbose --disable-progress-bar
