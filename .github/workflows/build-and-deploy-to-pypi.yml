name: Build and Deploy to PYPI

on:
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  PYTHON_VERSION: "3.11"
  PYTHON_VERSION_SHORT: "3.11.9"

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - uses: actions/setup-python@v5.1.1
      with:
        python-version: ${{env.PYTHON_VERSION}}

    - uses: actions/setup-python@v5.1.1
      with:
        python-version: "3.12.4"
    - run: pip install -r requirements.txt
    
    - name: Configure CMake
      run: cmake -DPYBIND11_PYTHON_VERSION="${{ env.PYTHON_VERSION }}" -S . -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }}

    - name: Install package 'build'
      run: py -${{ env.PYTHON_VERSION }} -m pip install build

    - name: Build Wheel
      run: py -${{ env.PYTHON_VERSION }} -m build -w ./PythonBuild

    - name: Install Twine
      run: py -${{ env.PYTHON_VERSION }} -m pip install twine

    - name: Publish on PyPI
      run: py -${{ env.PYTHON_VERSION }} -m twine upload --repository-url https://test.pypi.org/legacy/ -u __token__ -p ${{ secrets.PYPI_REPO_TOKEN }} PythonBuild/dist/* --verbose --disable-progress-bar

  build-manylinux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
  
    - name: Build manylinux wheel
      run: |
        docker run --rm -v $(pwd):/io quay.io/pypa/manylinux_2_28_x86_64 /bin/bash -c "
        set -e
        cd /io
        
        # Install necessary dependencies
        yum install -y \
          epel-release \
          kernel-headers \
          wayland-devel \
          libxkbcommon-devel \
          wayland-protocols-devel \
          mesa-libGL-devel \
          mesa-libEGL-devel \
          libXcursor-devel \
          libXi-devel \
          libXinerama-devel \
          libXrandr-devel \
          libXrender-devel \
          libXext-devel \
          libXfixes-devel \
          libXt-devel \
          libXtst-devel \
          libX11-devel \
          libXdamage-devel \
          libXcomposite-devel \
          libwayland-client \
          libevdev-devel \
          kernel-devel \
          libXrandr-devel \
          && yum clean all
        
        # Use Python 3.11 from /opt/python
        export PYTHON_ROOT=/opt/python/cp311-cp311
        export PATH=\$PYTHON_ROOT/bin:\$PATH
        export PYTHON_EXECUTABLE=\$PYTHON_ROOT/bin/python
        
        \$PYTHON_EXECUTABLE -m pip install --upgrade pip
        \$PYTHON_EXECUTABLE -m pip install -r requirements.txt
        \$PYTHON_EXECUTABLE -m pip install cmake build auditwheel
        
        # CMake configuration for module development
        \$PYTHON_EXECUTABLE -m cmake \
          -DPython3_ROOT_DIR=\$PYTHON_ROOT \
          -DPython3_EXECUTABLE=\$PYTHON_EXECUTABLE \
          -DPython_FIND_STRATEGY=LOCATION \
          -DPython_FIND_REGISTRY=NEVER \
          -DPython_FIND_FRAMEWORK=NEVER \
          -DPYBIND11_PYTHON_VERSION=3.11 \
          -DCMAKE_C_FLAGS=\"-D_POSIX_C_SOURCE=200809L -Wno-deprecated-declarations\" \
          -DCMAKE_CXX_FLAGS=\"-D_POSIX_C_SOURCE=200809L -Wno-deprecated-declarations\" \
          -S . -B build -DCMAKE_BUILD_TYPE=Release
        
        \$PYTHON_EXECUTABLE -m cmake --build build --config Release
        \$PYTHON_EXECUTABLE -m build -w ./PythonBuild
        for whl in PythonBuild/dist/*.whl; do
          auditwheel repair \"\$whl\" -w ./wheelhouse/
        done
        "
  
    - name: Install Twine
      run: pip install twine
  
    - name: Publish on PyPI
      run: python -m twine upload --repository-url https://test.pypi.org/legacy/ -u __token__ -p ${{ secrets.PYPI_REPO_TOKEN }} wheelhouse/*.whl --verbose --disable-progress-bar