name: Build and Deploy to PYPI

on:
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  PYTHON_VERSION: "3.11"
  PYTHON_VERSION_SHORT: "3.11.9"

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - uses: actions/setup-python@v5.1.1
      with:
        python-version: ${{env.PYTHON_VERSION}}

    - uses: actions/setup-python@v5.1.1
      with:
        python-version: "3.12.4"
    - run: pip install -r requirements.txt
    
    - name: Configure CMake
      run: cmake -DPYBIND11_PYTHON_VERSION="${{ env.PYTHON_VERSION }}" -S . -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }}

    - name: Install package 'build'
      run: py -${{ env.PYTHON_VERSION }} -m pip install build

    - name: Build Wheel
      run: py -${{ env.PYTHON_VERSION }} -m build -w ./PythonBuild

    - name: Install Twine
      run: py -${{ env.PYTHON_VERSION }} -m pip install twine

    - name: Publish on PyPI
      run: py -${{ env.PYTHON_VERSION }} -m twine upload --repository-url https://test.pypi.org/legacy/ -u __token__ -p ${{ secrets.PYPI_REPO_TOKEN }} PythonBuild/dist/* --verbose --disable-progress-bar

  build-manylinux:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build and repair wheel inside manylinux2014 Docker container
      uses: addnab/docker-run-action@v3
      with:
        image: quay.io/pypa/manylinux2014_x86_64
        options: --rm -v ${{ github.workspace }}:/project
        run: |
          yum install -y \
            wayland-devel \
            libxkbcommon-devel \
            libXrandr-devel \
            libXinerama-devel \
            libX11-devel \
            libXcursor-devel \
            libXi-devel \
            libXext-devel \
            libXcomposite-devel \
            libXdamage-devel \
            libXfixes-devel \
            mesa-libGL-devel &&
          /opt/python/cp311-cp311/bin/python -m pip install --upgrade pip &&
          /opt/python/cp311-cp311/bin/python -m pip install cmake auditwheel build &&
          cd /project &&
          cmake -DPYBIND11_PYTHON_VERSION=${PYTHON_VERSION} -S . -B build -DCMAKE_BUILD_TYPE=${BUILD_TYPE} &&
          cmake --build build --config ${BUILD_TYPE} &&
          /opt/python/cp311-cp311/bin/python -m build -w ./PythonBuild &&
          mkdir -p repaired_wheels &&
          for whl in PythonBuild/dist/*.whl; do
            auditwheel repair \"$whl\" --plat manylinux2014_x86_64 -w repaired_wheels/
          done

    - name: Install Twine
      run: pip install twine

    - name: Publish on PyPI
      run: |
        python -m twine upload --repository-url https://test.pypi.org/legacy/ -u __token__ -p ${{ secrets.PYPI_REPO_TOKEN }} repaired_wheels/* --verbose --disable-progress-bar