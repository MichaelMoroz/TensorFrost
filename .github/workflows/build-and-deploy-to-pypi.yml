name: Build and Deploy to PYPI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  PYTHON_VERSION: "3.10"

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - uses: actions/setup-python@v5.1.1
      with:
        python-version: ${{env.PYTHON_VERSION}}
    - run: cmd.exe /C where python

    - uses: actions/setup-python@v5.1.1
      with:
        python-version: "3.12.4"
    - run: cmd.exe /C where python
    - run: pip install -r requirements.txt
    
    
    - name: Configure CMake
      run: cmake -DPYBIND11_PYTHON_VERSION="${{env.PYTHON_VERSION}}" -S . -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Versions Berfore
      run: cmd.exe /C where python

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Install package 'build'
      run: py -${{env.PYTHON_VERSION}} -m pip install build

    - name: Build Wheel
      run: py -${{env.PYTHON_VERSION}} -m build -w ./PythonBuild
  
    # - name: Publish package to PyPI
    #   uses: pypa/gh-action-pypi-publish@release/v1
    #   with:
    #     packages-dir: ./PythonBuild/dist
    #     user: __token__
    #     password: ${{secrets.PYPI_REPO_TOKEN}}

    - name: Install Twine 
      run: py -${{env.PYTHON_VERSION}} -m pip install twine

    - name: Publish on PyPI
      run: py -${{env.PYTHON_VERSION}} -m twine upload ./PythonBuild/dist/* -u __token__ -p ${{secrets.PYPI_REPO_TOKEN}}
