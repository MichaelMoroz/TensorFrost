name: Build and Deploy to PYPI

on:
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  PYTHON_VERSION: "3.11"
  PYTHON_VERSION_SHORT: "3.11.9"

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - uses: actions/setup-python@v5.1.1
      with:
        python-version: ${{env.PYTHON_VERSION}}

    - uses: actions/setup-python@v5.1.1
      with:
        python-version: "3.12.4"
    - run: pip install -r requirements.txt
    
    - name: Configure CMake
      run: cmake -DPYBIND11_PYTHON_VERSION="${{ env.PYTHON_VERSION }}" -S . -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }}

    - name: Install package 'build'
      run: py -${{ env.PYTHON_VERSION }} -m pip install build

    - name: Build Wheel
      run: py -${{ env.PYTHON_VERSION }} -m build -w ./PythonBuild

    - name: Install Twine
      run: py -${{ env.PYTHON_VERSION }} -m pip install twine

    - name: Publish on PyPI
      run: py -${{ env.PYTHON_VERSION }} -m twine upload --repository-url https://test.pypi.org/legacy/ -u __token__ -p ${{ secrets.PYPI_REPO_TOKEN }} PythonBuild/dist/* --verbose --disable-progress-bar

  build-manylinux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
  
    - name: Build manylinux wheel
      run: |
        docker run --rm -v $(pwd):/io quay.io/pypa/manylinux2014_x86_64 /bin/bash -c "
        set -e
        cd /io
        yum install -y \
          epel-release \
          libwayland-client \
          libxkbcommon \
          libXrandr \
          libXinerama \
          libX11 \
          libXcursor \
          libXi \
          libXext \
          libXcomposite \
          libXdamage \
          libXfixes \
          mesa-libGL \
          && yum clean all
        
        # Use Python 3.11 from /opt/python
        PYTHON=/opt/python/cp311-cp311/bin/python
        
        \$PYTHON -m pip install --upgrade pip
        \$PYTHON -m pip install -r requirements.txt
        \$PYTHON -m pip install cmake build auditwheel
        \$PYTHON -m cmake -DPYBIND11_PYTHON_VERSION='3.11' -S . -B build -DCMAKE_BUILD_TYPE=Release
        \$PYTHON -m cmake --build build --config Release
        \$PYTHON -m build -w ./PythonBuild
        for whl in PythonBuild/dist/*.whl; do
          auditwheel repair \"\$whl\" -w ./wheelhouse/
        done
        "
  
    - name: Install Twine
      run: pip install twine
  
    - name: Publish on PyPI
      run: python -m twine upload --repository-url https://test.pypi.org/legacy/ -u __token__ -p ${{ secrets.PYPI_REPO_TOKEN }} wheelhouse/*.whl --verbose --disable-progress-bar