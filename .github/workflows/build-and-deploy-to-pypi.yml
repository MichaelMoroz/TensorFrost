name: Build and Deploy to PYPI

on:
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  PYTHON_VERSION: "3.11"
  CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2014"

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - uses: actions/setup-python@v5.1.1
      with:
        python-version: ${{env.PYTHON_VERSION}}

    - uses: actions/setup-python@v5.1.1
      with:
        python-version: "3.12.4"
    - run: pip install -r requirements.txt
    
    - name: Configure CMake
      run: cmake -DPYBIND11_PYTHON_VERSION="${{ env.PYTHON_VERSION }}" -S . -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }}

    - name: Install package 'build'
      run: py -${{ env.PYTHON_VERSION }} -m pip install build

    - name: Build Wheel
      run: py -${{ env.PYTHON_VERSION }} -m build -w ./PythonBuild

    - name: Install Twine
      run: py -${{ env.PYTHON_VERSION }} -m pip install twine

    - name: Publish on PyPI
      run: py -${{ env.PYTHON_VERSION }} -m twine upload --repository-url https://test.pypi.org/legacy/ -u __token__ -p ${{ secrets.PYPI_REPO_TOKEN }} PythonBuild/dist/* --verbose --disable-progress-bar

  build-manylinux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build Wheel in manylinux2014 Docker
        run: |
          docker run --rm -v $(pwd):/io quay.io/pypa/manylinux2014_x86_64 bash -c "
            yum install -y epel-release &&
            yum install -y cmake3 make gcc gcc-c++ \
              mesa-libGL-devel libXrandr-devel libXinerama-devel libXcursor-devel \
              libXi-devel libX11-devel libXext-devel libXcomposite-devel libXdamage-devel \
              libXfixes-devel wayland-devel wayland-protocols-devel python3-devel &&
            cd /io &&
            /opt/python/cp311-cp311/bin/pip install -r requirements.txt &&
            export PATH=/opt/python/cp311-cp311/bin:$PATH &&
            export PYTHON_INCLUDE_DIR=/opt/python/cp311-cp311/include/python3.11 &&
            export PYTHON_LIBRARY=/opt/python/cp311-cp311/lib/libpython3.11.so &&
            cmake -DPYBIND11_PYTHON_VERSION=${PYTHON_VERSION} -DPython3_INCLUDE_DIR=${PYTHON_INCLUDE_DIR} -DPython3_LIBRARIES=${PYTHON_LIBRARY} -S . -B build -DCMAKE_BUILD_TYPE=${BUILD_TYPE} &&
            cmake --build build --config ${BUILD_TYPE} &&
            /opt/python/cp311-cp311/bin/python -m pip install build &&
            /opt/python/cp311-cp311/bin/python -m build -w ./PythonBuild &&
            auditwheel repair PythonBuild/dist/*.whl -w /io/repaired_wheels
          "

      - name: Install Twine
        run: pip install twine

      - name: Publish on PyPI
        run: python -m twine upload --repository-url https://test.pypi.org/legacy/ -u __token__ -p ${{ secrets.PYPI_REPO_TOKEN }} repaired_wheels/* --verbose --disable-progress-bar