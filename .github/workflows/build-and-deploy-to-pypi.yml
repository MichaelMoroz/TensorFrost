name: Build and Deploy to PYPI

on:
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  PYTHON_VERSION: "3.11"

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - uses: actions/setup-python@v5.1.1
      with:
        python-version: ${{env.PYTHON_VERSION}}

    - uses: actions/setup-python@v5.1.1
      with:
        python-version: "3.12.4"
    - run: pip install -r requirements.txt
    
    - name: Configure CMake
      run: cmake -DPYBIND11_PYTHON_VERSION="${{ env.PYTHON_VERSION }}" -S . -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }}

    - name: Install package 'build'
      run: py -${{ env.PYTHON_VERSION }} -m pip install build

    - name: Build Wheel
      run: py -${{ env.PYTHON_VERSION }} -m build -w ./PythonBuild

    - name: Install Twine
      run: py -${{ env.PYTHON_VERSION }} -m pip install twine

    - name: Publish on PyPI
      run: py -${{ env.PYTHON_VERSION }} -m twine upload --repository-url https://test.pypi.org/legacy/ -u __token__ -p ${{ secrets.PYPI_REPO_TOKEN }} PythonBuild/dist/* --verbose --disable-progress-bar

  build-manylinux:
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/manylinux2014_x86_64
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set Python Version No Dot
      run: echo "PYTHON_VERSION_NO_DOT=${{ env.PYTHON_VERSION//./ }}" >> $GITHUB_ENV

    - name: Install system dependencies
      run: |
        yum install -y \
          wayland-devel \
          libX11-devel \
          libXcursor-devel \
          libXi-devel \
          libXext-devel \
          libXrandr-devel \
          libXinerama-devel \
          libXcomposite-devel \
          libXdamage-devel \
          libXfixes-devel \
          mesa-libGL-devel \
          mesa-libEGL-devel

    - name: Set up Python
      run: /opt/python/cp${{ env.PYTHON_VERSION_NO_DOT }}-cp${{ env.PYTHON_VERSION_NO_DOT }}/bin/python -m ensurepip

    - name: Install dependencies
      run: |
        /opt/python/cp${{ env.PYTHON_VERSION_NO_DOT }}-cp${{ env.PYTHON_VERSION_NO_DOT }}/bin/pip install -r requirements.txt
        /opt/python/cp${{ env.PYTHON_VERSION_NO_DOT }}-cp${{ env.PYTHON_VERSION_NO_DOT }}/bin/pip install cmake auditwheel build

    - name: Build Wheel
      run: |
        cmake -DPYBIND11_PYTHON_VERSION="${{ env.PYTHON_VERSION }}" -S . -B build -DCMAKE_BUILD_TYPE=Release
        cmake --build build --config Release
        /opt/python/cp${{ env.PYTHON_VERSION_NO_DOT }}-cp${{ env.PYTHON_VERSION_NO_DOT }}/bin/python -m build -w ./PythonBuild

    - name: Repair Wheel with auditwheel
      run: |
        mkdir -p repaired_wheels
        for whl in PythonBuild/dist/*.whl; do
          auditwheel repair "$whl" --plat manylinux2014_x86_64 -w repaired_wheels/
        done

    - name: Install Twine
      run: /opt/python/cp${{ env.PYTHON_VERSION_NO_DOT }}-cp${{ env.PYTHON_VERSION_NO_DOT }}/bin/pip install twine

    - name: Publish on PyPI
      run: /opt/python/cp${{ env.PYTHON_VERSION_NO_DOT }}-cp${{ env.PYTHON_VERSION_NO_DOT }}/bin/python -m twine upload --repository-url https://test.pypi.org/legacy/ -u __token__ -p ${{ secrets.PYPI_REPO_TOKEN }} repaired_wheels/* --verbose --disable-progress-bar
